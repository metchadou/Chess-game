quit
display self.board[prev_pos].
display self.board
display self.board.object_id
display self.board[[prev_pos]]
display captured_piece?(prev_pos)
display (!piece.empty? && piece.color == self.color)
display (!piece.empty? && piece.color == self.color) || captured_piece?(prev_pos)
display piece.color == self.color
display !piece.empty?
display piece
n
display prev_pos
undisplay 2
display current_pos
display cuurent_pos
display self
quit
n
display next_pos
n
display (!piece.empty? && piece.color == self.color) || captured_piece?(prev_pos)
n
display piece
display prev_pos
display current_pos
c
display self
quit
cc
c
quit
display self[[1,3]]
display self[[4,0]].moves.include?([0,4])
display self[[4,0]].moves
display self[[4,0]]
display king_pos
n
display color
s
undisplay 1
undisplay 2
undisplay 3
undisplay 4
undisplay 5
undisplay 6
undisplay 7
undisplay 8
undisplay 9
undisplay 11
undisplay 12
undisplay 13
undisplay 14
undisplay 15
display board_dup[@position]
display board_dup[start_pos]
display board_dup[end_pos]
display @board[end_pos]
display @board[@position]
n
undisplay 10
display self[end_pos]
display self[start_pos]
n
display start_piece.object_id
n
display start_pos
s
display @position
n
display board_dup[@position].board.object_id
display board_dup.object_id
display @board.object_id
n
display self.object_id
display end_pos
c
quit
n
s 35
s move_into_check?(pos)
display pos
c
n
s
display self.object_id
display moves
c
quit
display end_pos
n
display start_pos
n
s
c
n
display board_dup.object_id
n
display @board.object_id
c
quit
display board_dup.object_id
display board_dup[@position].board.object_id
display board_dup[@position]
display board_dup[[@position]]
n
display @board.object_id
c
quit
display board_dup[[1,0]].board.object_id
display board_dup[[1,0]].boar.object_id
display board_dup[[1,0]]
n
display n
undisplay 9
undisplay
display @position.board.object_id
n
display @position
display @board[[1,0]]
n
undisplay 6
display opposing_pieces(:black)
s
n
display color
s
n
undisplay 4
display display self.object_id
s
n
display board_dup.object_id
n
display @board.object_id
display end_pos
quit
n
s
display moves
quit
n
display moves
display @board.object_id
quit
n
display moves
display pos
n
display king_pos
n
display color
s
n
display end_pos
display start_pos
quit
n
display color
s
n
display self[start_pos]
display @board[start_pos]
display end_pos
display start_pos
quit
n
display @position
quit
display board_dup[@position]
undisplay 4
undisplay 3
n
display board_dup
display board
display @position
display end_pos
n
c
n
s
c
n
display board_copy.rows.deep_dup.object_id
display board_copy.rows.deep_dup
display board_copy.rows.object_id
display board_copy.rows
display board_copy
quit
n
display potential_attack_positions
n
display next_rank
n
s
c
quit
display current_pos
c
display piece
c
quit
display start_piece
n
display self
display position
display val
quit
display self[end_pos]
display self[end_pos].position
c
n
display self[end_pos].position = end_pos
display self[end_pos].position
display self[end_pos]
display end_pos
c
quit
display piece
n
s
display pos
s
n
display potential_attack_positions
display next_rank
quit
n
s
n
display pos
s
n
display next_pos
display steps
c
quit
n
s
n
display piece
display current_pos
s
n
display next_pos
n
display prev_pos
n
display unblocked_moves
s
n
display dy
display dx
s
n
s
